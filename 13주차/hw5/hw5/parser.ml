type token =
  | NUM of (int)
  | VAR of (string)
  | BOOLEAN of (bool)
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | EQUALEQUAL
  | LE
  | LT
  | GE
  | GT
  | NOT
  | AND
  | OR
  | ISZERO
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | LETREC
  | LPAREN
  | RPAREN
  | FUN
  | ARROW
  | EOF

open Parsing;;
let _ = parse_error;;
# 6 "parser.mly"
# 35 "parser.ml"
let yytransl_const = [|
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* STAR *);
  263 (* SLASH *);
  264 (* EQUAL *);
  265 (* EQUALEQUAL *);
  266 (* LE *);
  267 (* LT *);
  268 (* GE *);
  269 (* GT *);
  270 (* NOT *);
  271 (* AND *);
  272 (* OR *);
  273 (* ISZERO *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* LETREC *);
  280 (* LPAREN *);
  281 (* RPAREN *);
  282 (* FUN *);
  283 (* ARROW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* VAR *);
  259 (* BOOLEAN *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\005\000\006\000\006\000\
\006\000\007\000\007\000\007\000\003\000\000\000"

let yylen = "\002\000\
\002\000\006\000\006\000\007\000\009\000\004\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\002\000\002\000\001\000\002\000\002\000\
\001\000\001\000\001\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\026\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\019\000\
\000\000\025\000\020\000\021\000\023\000\000\000\029\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\000\000\004\000\
\000\000\005\000"

let yydgoto = "\002\000\
\013\000\014\000\024\000\015\000\016\000\017\000\018\000"

let yysindex = "\005\000\
\028\255\000\000\000\000\000\000\002\255\002\255\010\255\028\255\
\007\255\007\255\028\255\007\255\000\000\013\000\065\255\000\000\
\010\255\000\000\000\000\000\000\000\000\252\254\000\000\013\255\
\254\254\000\255\004\255\000\000\002\255\002\255\002\255\002\255\
\002\255\002\255\002\255\002\255\002\255\002\255\002\255\000\000\
\028\255\028\255\007\255\024\255\000\000\028\255\011\255\011\255\
\000\000\000\000\114\255\055\255\055\255\055\255\055\255\099\255\
\082\255\017\255\016\255\018\255\028\255\000\000\028\255\028\255\
\036\255\025\255\000\000\000\000\028\255\028\255\026\255\000\000\
\028\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\039\000\
\000\000\000\000\115\000\056\000\073\000\090\000\107\000\123\000\
\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\254\255\106\000\022\000\000\000\007\000"

let yytablesize = 415
let yytable = "\023\000\
\022\000\022\000\003\000\004\000\026\000\001\000\005\000\025\000\
\023\000\027\000\003\000\004\000\028\000\021\000\041\000\006\000\
\031\000\032\000\007\000\008\000\042\000\043\000\044\000\040\000\
\045\000\011\000\019\000\020\000\003\000\004\000\046\000\061\000\
\005\000\011\000\058\000\059\000\063\000\064\000\009\000\062\000\
\060\000\006\000\065\000\069\000\007\000\008\000\070\000\073\000\
\009\000\000\000\010\000\011\000\000\000\012\000\066\000\014\000\
\067\000\068\000\029\000\030\000\031\000\032\000\071\000\072\000\
\000\000\000\000\074\000\000\000\029\000\030\000\031\000\032\000\
\013\000\033\000\034\000\035\000\036\000\037\000\000\000\038\000\
\039\000\000\000\000\000\000\000\000\000\029\000\030\000\031\000\
\032\000\016\000\033\000\034\000\035\000\036\000\037\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\032\000\015\000\033\000\034\000\035\000\036\000\037\000\
\000\000\000\000\012\000\000\000\000\000\029\000\030\000\031\000\
\032\000\000\000\017\000\034\000\035\000\036\000\037\000\000\000\
\000\000\018\000\000\000\000\000\000\000\007\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\022\000\022\000\000\000\022\000\008\000\
\008\000\022\000\000\000\000\000\008\000\008\000\008\000\008\000\
\008\000\000\000\008\000\008\000\000\000\000\000\008\000\008\000\
\000\000\008\000\009\000\009\000\008\000\000\000\000\000\009\000\
\009\000\009\000\009\000\009\000\000\000\009\000\009\000\000\000\
\000\000\009\000\009\000\000\000\009\000\000\000\000\000\009\000\
\014\000\014\000\014\000\014\000\014\000\000\000\014\000\014\000\
\000\000\000\000\014\000\014\000\000\000\014\000\000\000\000\000\
\014\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\000\000\000\000\013\000\013\000\000\000\013\000\000\000\
\000\000\013\000\016\000\016\000\016\000\016\000\016\000\000\000\
\016\000\016\000\000\000\000\000\016\000\016\000\000\000\016\000\
\000\000\000\000\016\000\015\000\015\000\015\000\015\000\015\000\
\000\000\015\000\015\000\012\000\000\000\015\000\015\000\000\000\
\015\000\012\000\012\000\015\000\000\000\012\000\012\000\000\000\
\012\000\017\000\017\000\012\000\000\000\017\000\017\000\000\000\
\017\000\018\000\000\000\017\000\018\000\018\000\000\000\018\000\
\007\000\007\000\018\000\007\000\000\000\000\000\007\000"

let yycheck = "\002\001\
\000\000\008\000\001\001\002\001\011\000\001\000\005\001\010\000\
\002\001\012\000\001\001\002\001\000\000\007\000\019\001\014\001\
\006\001\007\001\017\001\000\000\008\001\024\001\025\000\017\000\
\025\001\024\001\005\000\006\000\001\001\002\001\027\001\008\001\
\005\001\024\001\041\000\042\000\020\001\022\001\000\000\046\000\
\043\000\014\001\025\001\008\001\017\001\018\001\022\001\022\001\
\021\001\255\255\023\001\024\001\255\255\026\001\061\000\000\000\
\063\000\064\000\004\001\005\001\006\001\007\001\069\000\070\000\
\255\255\255\255\073\000\255\255\004\001\005\001\006\001\007\001\
\000\000\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\004\001\005\001\006\001\
\007\001\000\000\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\004\001\005\001\
\006\001\007\001\000\000\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\000\000\255\255\255\255\004\001\005\001\006\001\
\007\001\255\255\000\000\010\001\011\001\012\001\013\001\255\255\
\255\255\000\000\255\255\255\255\255\255\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\022\001\004\001\
\005\001\025\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\255\255\255\255\019\001\020\001\
\255\255\022\001\004\001\005\001\025\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\255\255\
\255\255\019\001\020\001\255\255\022\001\255\255\255\255\025\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\255\255\255\255\019\001\020\001\255\255\022\001\255\255\255\255\
\025\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\255\255\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\009\001\255\255\019\001\020\001\255\255\
\022\001\015\001\016\001\025\001\255\255\019\001\020\001\255\255\
\022\001\015\001\016\001\025\001\255\255\019\001\020\001\255\255\
\022\001\016\001\255\255\025\001\019\001\020\001\255\255\022\001\
\019\001\020\001\025\001\022\001\255\255\255\255\025\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LE\000\
  LT\000\
  GE\000\
  GT\000\
  NOT\000\
  AND\000\
  OR\000\
  ISZERO\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  LETREC\000\
  LPAREN\000\
  RPAREN\000\
  FUN\000\
  ARROW\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  VAR\000\
  BOOLEAN\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 27 "parser.mly"
            ( _1 )
# 274 "parser.ml"
               : Kml.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 31 "parser.mly"
                             ( Kml.IF (_2, _4, _6) )
# 283 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 32 "parser.mly"
                             ( Kml.LET (_2, _4, _6) )
# 292 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 33 "parser.mly"
                                    ( Kml.LETREC (_2, _3, _5, _7) )
# 302 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 34 "parser.mly"
                                                  ( Kml.LETREC (_2, _4, _7, _9) )
# 312 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 35 "parser.mly"
                      ( Kml.FUN (_2, _4) )
# 320 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 36 "parser.mly"
                ( _1 )
# 327 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 40 "parser.mly"
                               ( Kml.ADD (_1, _3) )
# 335 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 41 "parser.mly"
                                ( Kml.SUB (_1, _3) )
# 343 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 42 "parser.mly"
                               ( Kml.MUL (_1, _3) )
# 351 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 43 "parser.mly"
                                ( Kml.DIV (_1, _3) )
# 359 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 44 "parser.mly"
                                     ( Kml.EQ (_1, _3) )
# 367 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 45 "parser.mly"
                             ( Kml.LT (_1, _3) )
# 375 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 46 "parser.mly"
                             ( Kml.LE (_1, _3) )
# 383 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 47 "parser.mly"
                             ( Kml.GT (_1, _3) )
# 391 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 48 "parser.mly"
                             ( Kml.GE (_1, _3) )
# 399 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 49 "parser.mly"
                              ( Kml.AND (_1, _3) )
# 407 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binary_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binary_exp) in
    Obj.repr(
# 50 "parser.mly"
                             ( Kml.OR (_1, _3) )
# 415 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_exp) in
    Obj.repr(
# 51 "parser.mly"
              ( _1 )
# 422 "parser.ml"
               : 'binary_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_exp) in
    Obj.repr(
# 55 "parser.mly"
                    ( Kml.UMINUS _2 )
# 429 "parser.ml"
               : 'unary_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_exp) in
    Obj.repr(
# 56 "parser.mly"
                  ( Kml.NOT _2 )
# 436 "parser.ml"
               : 'unary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_exp) in
    Obj.repr(
# 57 "parser.mly"
                ( _1 )
# 443 "parser.ml"
               : 'unary_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp) in
    Obj.repr(
# 60 "parser.mly"
                       ( Kml.ISZERO _2 )
# 450 "parser.ml"
               : 'postfix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp) in
    Obj.repr(
# 61 "parser.mly"
                            ( Kml.APP (_1, _2) )
# 458 "parser.ml"
               : 'postfix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_exp) in
    Obj.repr(
# 62 "parser.mly"
                ( _1 )
# 465 "parser.ml"
               : 'postfix_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 66 "parser.mly"
        ( Kml.NUM _1 )
# 472 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
        ( Kml.VAR _1 )
# 479 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 68 "parser.mly"
                      ( _2 )
# 486 "parser.ml"
               : 'primary_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
        ( _1 )
# 493 "parser.ml"
               : 'var))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Kml.program)
